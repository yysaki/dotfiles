[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc'
hook_post_update = '''
  let g:dein#plugin.build = 'make'
'''

[[plugins]]
repo = 'thinca/vim-qfreplace'

[[plugins]]
repo = 'vim-jp/vital.vim'

[[plugins]]
repo = 'godlygeek/tabular'

# essential
[[plugins]]
repo = 'tpope/vim-unimpaired'

[[plugins]]
repo = 'cohama/lexima.vim'
hook_add = '''
  call lexima#add_rule({'char': '<%', 'input_after': '%>'})
'''

[[plugins]]
repo = 'vim-scripts/matchit.zip'

[[plugins]]
repo = 'vim-scripts/sudo.vim'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  silent! map <Space>q <Plug>(quickrun)

  let g:quickrun_config = {}
  let g:quickrun_config['_'] = {'runner': 'vimproc', 'runner/vimproc/updatetime': 60, 'split': 'below'}
  let g:quickrun_config['make']       = {'command': 'make', 'exec' : '%c %o',  'outputter': 'error:buffer:quickfix'}
  let g:quickrun_config['make.check'] = {'command': 'make', 'cmdopt': 'check', 'outputter': 'error:buffer:quickfix'}
  let g:quickrun_config['make.run']   = {'command': 'make', 'cmdopt': 'run',   'outputter': 'error:buffer:quickfix'}
  let g:quickrun_config['make.test']  = {'command': 'make', 'cmdopt': 'test',  'outputter': 'error:buffer:quickfix'}
  let g:quickrun_config['tex']        = {'command': 'make', 'exec' : '%c %o',  'outputter': 'error:buffer:quickfix'}
'''

# work as project
[[plugins]]
repo = 'editorconfig/editorconfig-vim'

# syntax highlight
[[plugins]]
repo = 'vim-scripts/vim-niji'

# colorscheme
[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
  \ 'colorscheme': 'wombat',
  \ 'active': {
  \   'left': [['mode', 'paste'], ['gitbranch', 'readonly', 'relativepath', 'modified']]
  \ },
  \ 'inactive': {
  \   'left': [['relativepath']]
  \ },
  \ 'component_function': {
  \   'gitbranch': 'fugitive#head'
  \ },
  \ 'tab_component_function': {
  \   'filename': 'TabCurrentDirectory',
  \   'modified': 'lightline#tab#modified',
  \   'readonly': 'lightline#tab#readonly',
  \   'tabnum': 'lightline#tab#tabnum' }
  \ }

  augroup TabCurrentDirectoryChanged
    autocmd!
    autocmd DirChanged,TabLeave *
    \ let t:tab_cwd = getcwd()
  augroup END

  function! TabCurrentDirectory(n) abort
    let _ = gettabvar(a:n, 'tab_cwd')
    return _ !=# '' ? _ : getcwd()
  endfunction
'''

[[plugins]]
repo = 'edkolev/tmuxline.vim'
hook_add = '''
  let g:tmuxline_powerline_separators = 0
  let g:tmuxline_theme = 'lightline'
  let g:tmuxline_preset = {
        \ 'a'       : '#S',
        \ 'b'       : ['#(whoami)'],
        \ 'win'     : ['#I', '#W'],
        \ 'cwin'    : ['#I', '#W', '#F'],
        \ 'y'       : ['%Y/%m/%d(%a) %H:%M'],
        \ 'z'       : '#H',
        \ 'options' : { 'status-justify': 'left' },
        \  }
'''

# file explorer
[[plugins]]
repo = 'justinmk/vim-dirvish'

[[plugins]]
repo = 'kana/vim-altr'
hook_add = '''
  nmap <Space>a <Plug>(altr-forward)
  call altr#define('%.xaml', '%.xaml.cs')
  call altr#define('app/%.rb', 'spec/%_spec.rb')
'''

# operator
[[plugins]]
repo = 'tpope/vim-surround'
hook_add = '''
  let g:surround_{char2nr('-')} = '<% \r %>'
  let g:surround_{char2nr('=')} = '<%= \r %>'
  let g:surround_{char2nr('#')} = '<%# \r %>'
'''

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'machakann/vim-swap'
hook_add = '''
  omap i, <Plug>(swap-textobject-i)
  xmap i, <Plug>(swap-textobject-i)
  omap a, <Plug>(swap-textobject-a)
  xmap a, <Plug>(swap-textobject-a)
'''

# motion
[[plugins]]
repo = 'easymotion/vim-easymotion'
depends = ['vim-migemo']
hook_add = '''
  let g:EasyMotion_do_mapping = 0

  nmap s <Plug>(easymotion-overwin-f2)

  nmap <Space>s <Plug>(easymotion-bd-f2)
  vmap <Space>s <Plug>(easymotion-bd-f2)
  nmap <Space>S <Plug>(easymotion-overwin-f2)
  vmap <Space>S <Plug>(easymotion-bd-f2)

  map <Space>L <Plug>(easymotion-bd-jk)
  nmap <Space>L <Plug>(easymotion-overwin-line)

  map  <Space>w <Plug>(easymotion-bd-w)
  nmap <Space>w <Plug>(easymotion-overwin-w)

  let g:EasyMotion_smartcase = 1
  let g:EasyMotion_use_migemo = 1
'''

[[plugins]]
repo = 'rhysd/clever-f.vim'
depends = ['vim-migemo']
hook_add = '''
  let g:clever_f_use_migemo = 1
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
  nmap n <Plug>(anzu-n-with-echo)
  nmap N <Plug>(anzu-N-with-echo)

  nmap *   <Plug>(anzu-star-with-echo)
  nmap #   <Plug>(anzu-sharp-with-echo)
  nmap g*  <Plug>(anzu-star-with-echo)
  nmap g#  <Plug>(anzu-sharp-with-echo)
'''

[[plugins]]
repo = 'haya14busa/vim-asterisk'
hook_add = '''
  vmap *   <Plug>(asterisk-*)<Plug>(anzu-update-search-status-with-echo)
  vmap #   <Plug>(asterisk-#)<Plug>(anzu-update-search-status-with-echo)
  vmap g*  <Plug>(asterisk-g*)<Plug>(anzu-update-search-status-with-echo)
  vmap g#  <Plug>(asterisk-g#)<Plug>(anzu-update-search-status-with-echo)

  map z*  <Plug>(asterisk-z*)<Plug>(anzu-update-search-status-with-echo)
  map gz* <Plug>(asterisk-gz*)<Plug>(anzu-update-search-status-with-echo)
  map z#  <Plug>(asterisk-z#)<Plug>(anzu-update-search-status-with-echo)
  map gz# <Plug>(asterisk-gz#)<Plug>(anzu-update-search-status-with-echo)
'''

# tabpage
[[plugins]]
repo = 'kana/vim-tabpagecd'

[[plugins]]
repo = 'thinca/vim-tabrecent'

# japanese
[[plugins]]
repo = 'haya14busa/vim-migemo'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'haya14busa/vim-gtrans'
# (go get github.com/haya14busa/gtrans)

# git
[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'lambdalisue/gina.vim'

[[plugins]]
repo = 'airblade/vim-gitgutter'

# fzf
[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
hook_add = '''
  let g:fzf_layout = { 'down': '40%' }
  command! -nargs=* -complete=dir Fq call fzf#run(fzf#wrap(
    \ {'source': 'ghq list --full-path',
    \  'sink': 'cd' }))
  nnoremap <silent> <Space>F :<C-u>Fq<CR>
'''

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = ['fzf']

[[plugins]]
repo = 'tweekmonster/fzf-filemru'

# textobj-user
[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'kana/vim-textobj-entire'

[[plugins]]
repo = 'kana/vim-textobj-indent'

[[plugins]]
repo = 'kana/vim-textobj-line'

[[plugins]]
repo = 'kana/vim-textobj-jabraces'

[[plugins]]
repo = 'thinca/vim-textobj-between'
hook_add = '''
  let g:textobj_between_no_default_key_mappings = 1

  omap iB <Plug>(textobj-between-i)
  omap aB <Plug>(textobj-between-a)
  vmap iB <Plug>(textobj-between-i)
  vmap aB <Plug>(textobj-between-a)
'''

[[plugins]]
repo = 'thinca/vim-textobj-comment'

# snippet
[[plugins]]
repo = 'honza/vim-snippets'

# lsp
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
  " let g:lsp_diagnostics_enabled = 0 " disable diagnostics support for ale.vim

  function! s:on_lsp_buffer_enabled() abort
      setlocal omnifunc=lsp#complete
      setlocal signcolumn=yes
      nmap <buffer> gd <plug>(lsp-definition)
      nmap <buffer> <f2> <plug>(lsp-rename)
      " refer to doc to add more commands
  endfunction

  " call s:on_lsp_buffer_enabled only for languages that has the server registered.
  autocmd MyAutoCmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
'''

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'mattn/vim-lsp-settings'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo = 'sheerun/vim-polyglot'

# lint
# [[plugins]]
# repo = 'w0rp/ale'
# if = '''has('job') && has('channel') && has('timers')'''
# hook_add = '''
#   let g:ale_lint_on_enter = 0
#
#   nmap <silent> [w <Plug>(ale_previous)
#   nmap <silent> ]w <Plug>(ale_next)
#   nmap <silent> [W <Plug>(ale_toggle)
#   nmap <silent> ]W <Plug>(ale_toggle)
#
#   let g:ale_fixers = {
#   \   'javascript': ['prettier', 'eslint'],
#   \   'javascriptreact': ['prettier', 'eslint'],
#   \   'typescript': ['prettier', 'eslint'],
#   \   'typescriptreact': ['prettier', 'eslint'],
#   \   'ruby': ['rubocop'],
#   \   'vue': ['prettier', 'eslint'],
#   \}
#   let g:ale_fix_on_save = 1
# '''

# howm
[[plugins]]
repo = 'fuenor/qfixgrep'

[[plugins]]
repo = 'fuenor/qfixhowm'
hook_add = '''
  let QFixHowm_Key            = 'g'                             " キーマップリーダー ex.'g,c'
  let QFixMRU_Filename        = '~/.qfixmru'                    " MRUリスト
  let howm_fileencoding       = 'utf-8'
  let howm_fileformat         = 'unix'
  let howm_filename           = '%Y/%m/%Y-%m-%d-%H%M%S.mkd'
  let QFixHowm_FileType       = 'markdown'
  let QFixHowm_Title          = '#'                             " タイトル記号
  let QFixHowm_FoldingPattern = '^[#[]'                         " 折りたたみのパターン

  let QFixHowm_ChDir = '~/Dropbox/Files/howm'
  let QFixHowm_RootDir = '~/Dropbox/Files/howm'

  nnoremap <silent> g,hh :echo howm_dir<CR>
  nnoremap <silent> g,ha :call HowmChEnv('',            'time', '#')<CR>
  nnoremap <silent> g,hp :call HowmChEnv('private-mkd', 'time', '#')<CR>
  nnoremap <silent> g,hw :call HowmChEnv('work-mkd',    'day',  '#')<CR>
'''

[[plugins]]
repo = 'kana/vim-fakeclip'
if = '''has('mac')'''

[[plugins]]
repo = 'Yggdroot/indentLine'
