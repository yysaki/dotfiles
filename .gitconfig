# ref: http://yuroyoro.hatenablog.com/entry/20101008/1286531851
[user]
  name = yysaki
  email = yysaki@yysaki.com
[color]
  ui = auto
[push]
  default = current
[core]
  excludesfile = ~/.gitignore  # globalな.gitignoreの指定
  editor = vim -c \"set fenc=utf-8\"
  pager = less -r
#  autocrlf = input             # CRLFを自動変換
[alias]
  ad = add
  add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`" # mergeの際にconflictが起きたファイルをadd
  amend = commit --amend  # 直前のcommitを修正
  ap = add -p
  au = add -u
  b = branch
  ba = branch -a           # originも含めた全てのbranchを表示
  bd = branch -d
  bm = branch --merged     # merge済みのbranchを表示
  bn = branch --no-merged  # mergeしてないbranchを表示
  ci = commit              # modifiedなファイルを全てstageへ
  co = checkout
  cob = checkout -b
  cp = cherry-pick
  d = diff
  d1 = diff HEAD~            # HEADから1つ前とdiff
  d10 = diff HEAD~~~~~~~~~~  # HEADから10前とdiff
  d2 = diff HEAD~~           # HEADから2つ前とdiff
  d3 = diff HEAD~~~          # HEADから3つ前とdiff
  d4 = diff HEAD~~~~         # HEADから4つ前とdiff
  d5 = diff HEAD~~~~~        # HEADから5つ前とdiff
  dc = diff --cached         # addされているものとのdiff
  df = diff
  dm = diff master           # masterとのdiff
  ds = diff --staged         # 同上(1.6.1移行)
  dw = diff --color-words    # 単語単位でいろつけてdiff
  edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`" # mergeの際にconflictが起きたファイルを編集
  f = fetch
  gn = grep -n
  gr = grep
  la = log --pretty=\"format:%ad %h (%an): %s\" --date=short  # ざっくりログ出す
  l = log
  lg = log --oneline --graph --decorate --abbrev-commit
  log-all = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  log-graph = log --graph --date=short --pretty=format:'%Cgreen%h %cd %Cblue%cn %Creset%s'
  log-s = log --oneline --graph --decorate
  lp = log -p              # diffも一緒に出す
  lr = log origin          # originのlog
  ls = log --stat          # logに変更されたファイルも一緒に出す
  ls = log --stat          # logに変更されたファイルも一緒に出す
  m = merge
  oneline = log --pretty=oneline
  ra = rebase --abort
  ranking = shortlog -s -n --no-merges
  rb = rebase
  rbm = rebase master      # masterへのrebaseはよく使うのでalias
  rc = rebase --continue
  rs = reset
  s = show
  s1 = show HEAD~1
  s2 = show HEAD~2
  s3 = show HEAD~3
  sa = stash apply
  sd = stash drop
  sl = stash list
  so = remote show origin
  sp = stash pop
  ss = stash save
  st = status
  t = tag
  up = pull --rebase       # pull rebase
  wc = whatchanged         # logに変更されたファイルも一緒に出す
